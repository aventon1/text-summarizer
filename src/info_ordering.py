#!/opt/python-3.6/bin/python3
"""Information ordering for multi-document text summarization that orders sentences in chronological order"""

# TODO: delete after temporary testing
SELECT_CONTENT_SEN = [
    ["This is sentence one in the first document.",
     "This is sentence two in the first document, which is a little longer.",
     "This is sentence three is the first document.",
     "This is sentence four in the first document.",
     "This is sentence one in the second document, which is even longer than the previous.",
     "This is sentence two in the second document, which is definitely the longest of all the sentences.",
     "This is sentence one in the third document, I lied, it's shorter.",
     "This is sentence two in the third document. It's okay, I guess.",
     "4th_sent_3rd_doc okay-to-add-if-it-fits?"
     ],
    ["This is the only sentence in the only doc in the second topic."]
]


SELECT_CONTENT_DATES = [[20190425, 20190425, 20190425, 20190425, 20190411, 20190411, 20190428, 20190428, 20190428], [20190415]]


def order_info(summaries_sent, sent_dates):
    """
    # TODO: update function when params change
    This function takes in 2D arrays: [topic][sentences], [topic][dates]
    generated by select_content(doc_data) in text_summarizer.py main.
    It should coherently order the sentences for each topic and return
    a 2D array of selected sentences in order for each topic. [topic][sentences]
    """

    # dummy data for testing TODO: delete later
    summaries_sent = SELECT_CONTENT_SEN
    sent_dates = SELECT_CONTENT_DATES

    # TODO: Change to a better ordering solution later?

    # 2D array that stores dates in chronological order:
    # [topic][dates] --> [[20190411, 20190425, 20190428], [20190415]]
    dates_in_order = []

    # Sort original dates in order, keeping the topics in the original order
    for topic_index in range(len(sent_dates)):
        dates_in_order.append(sorted(sent_dates[topic_index]))

    # 2D array that stores sentences in chronological order:
    # [topic][sentence] --> [[sent1, sent2, sent3], [sent1]]
    summaries_in_order = []

    # TODO: there's probably a better way to do this
    # Get chronological ordering of sentences based on sorted dates
    for topic_index in range(len(dates_in_order)):
        sentences = []
        index_of_date_added = set()
        for date_index in dates_in_order[topic_index]:

            # Get original ordering of indices
            # Multiple indices for the same date --> 20190411 will return [4, 5]
            indices = [i for i, x in enumerate(sent_dates[topic_index]) if x == date_index]

            # Get chronological occurrence of the date
            for index in indices:

                # keep track of dates of sentences already added already added
                if index not in index_of_date_added:
                    index_to_be_added = index
                    index_of_date_added.add(index)
                    break

            # Get the sentence that corresponds to that date
            sentences.append(summaries_sent[topic_index][index_to_be_added])

        # Add ordered sentences to 2D array
        summaries_in_order.append(sentences)

    # Return 2D array of ordered sentences
    return summaries_in_order



if __name__ == '__main__':

    summaries_in_order = order_info(SELECT_CONTENT_SEN, SELECT_CONTENT_DATES)

    print("\nTESTING: summaries_in_order={}".format(summaries_in_order))